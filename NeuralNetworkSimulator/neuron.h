#ifndef NEURON_H
#define NEURON_H

#include <string>
#include <cmath>

#include "data.h"
#include "random.h"

using namespace std;

class Neuron
{
protected:
    int length;                             // weights and deltaWeights array length
                                            // (it will be nFeatures + 1 because weight[0] is bias)
    double net;
    double output;
    double delta;
    vector<double> weights;
    vector<double> deltaWeights;
    vector<double> lastInput;               // for the weights updating

    double sigmoid(const double& x) const;
    double derivedSigmoid (const double& x) const;
public:
    Neuron();
    Neuron(int nFeatures, Random r);        // nFeatures is the length of every input (number of fields)
                                            // initialize weigths with random value generated by r

    vector<double> getWeights();

    double computeNet(const vector<double>& input);
    double computeOutput(const vector<double>& input);

    double getDelta();
    void updateWeights(const double& eta, const double& lambda, const double& alpha, const int& size);


    double findDelta(const vector<double>& outputNeuronDeltas, const vector<double>& outputWeights);
    double findDelta(const double& target);
};


#endif // NEURON_H
